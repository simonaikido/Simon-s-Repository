{// ðŸš¨ Hardcoded secrets
const jwtSecret = "supersecretjwtkey123!";
const stripeSecret = "sk_test_51H8w2ZFakeStripeKey";
const githubToken = "ghp_fakeGitHubToken1234567890";
const awsAccessKeyId = "AKIAIOSFODNN7EXAMPLE";
const awsSecretAccessKey = "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY";
const dbPassword = "supersecureDBpassword";

// ðŸš¨ Packages
const express = require('express');
const jwt = require('jsonwebtoken');
const crypto = require('crypto');
const app = express();

app.use(express.urlencoded({ extended: true }));

// ðŸš¨ Reflected XSS
app.get('/xss', (req, res) => {
  const name = req.query.name || 'Guest';
  res.send(`<h1>Hello, ${name}</h1>`); // XSS if name is <script>alert(1)</script>
});

// ðŸš¨ Dangerous eval usage
app.get('/eval', (req, res) => {
  const code = req.query.code;
  try {
    const result = eval(code); // Code Injection
    res.send(`Result: ${result}`);
  } catch (err) {
    res.status(500).send('Error evaluating code');
  }
});

// ðŸš¨ Insecure JWT without expiry
app.get('/token', (req, res) => {
  const token = jwt.sign({ role: 'admin' }, jwtSecret, { algorithm: 'HS256' });
  res.send(`JWT: ${token}`);
});

// ðŸš¨ Insecure crypto (weak algorithm)
app.get('/hash', (req, res) => {
  const hash = crypto.createHash('md5').update('sensitiveData').digest('hex');
  res.send(`MD5 hash: ${hash}`);
});

// ðŸš¨ Simulated login with hardcoded password
app.post('/login', (req, res) => {
  const { user, pass } = req.body;
  if (user === 'admin' && pass === 'admin123') {
    res.send('Welcome, admin!');
  } else {
    res.status(401).send('Unauthorized');
  }
});

// ðŸš¨ Exposing fake secret in log
console.log("ðŸš¨ Stripe Key:", stripeSecret);

app.listen(3000, () => {
  console.log('Waffle Factory running on port 3000');
});
